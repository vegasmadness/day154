---
import { getCurrentUser } from '../utils/auth';

// Server-side user data fetch
let user = null;
try {
  const { user: currentUser } = await getCurrentUser();
  user = currentUser;
} catch (error) {
  console.error('Error fetching user:', error);
}
---

<div id="user-profile" class="bg-white shadow rounded-lg p-6">
  <div class="flex items-center space-x-6">
    <div class="flex-shrink-0">
      <img
        id="user-avatar"
        class="h-20 w-20 rounded-full object-cover"
        src={user?.user_metadata?.avatar_url || '/images/default-avatar.svg'}
        alt="User avatar"
      />
    </div>
    
    <div class="flex-1 min-w-0">
      <h2 id="user-name" class="text-2xl font-bold text-gray-900 truncate">
        {user?.user_metadata?.full_name || 'Anonymous User'}
      </h2>
      <p id="user-email" class="text-sm text-gray-500 truncate">
        {user?.email || ''}
      </p>
      <p class="text-sm text-gray-500">
        Member since {user?.created_at ? new Date(user.created_at).toLocaleDateString() : 'Unknown'}
      </p>
    </div>
    
    <div class="flex-shrink-0">
      <button
        id="edit-profile-btn"
        type="button"
        class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
        </svg>
        Edit Profile
      </button>
    </div>
  </div>
  
  <!-- Edit Profile Modal -->
  <div id="edit-profile-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-medium text-gray-900">Edit Profile</h3>
          <button id="close-modal-btn" class="text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <form id="profile-form" class="space-y-4">
          <div>
            <label for="full-name" class="block text-sm font-medium text-gray-700">Full Name</label>
            <input
              type="text"
              id="full-name"
              name="full-name"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              value={user?.user_metadata?.full_name || ''}
            />
          </div>
          
          <div>
            <label for="avatar-url" class="block text-sm font-medium text-gray-700">Avatar URL</label>
            <input
              type="url"
              id="avatar-url"
              name="avatar-url"
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              value={user?.user_metadata?.avatar_url || ''}
              placeholder="https://example.com/avatar.jpg"
            />
          </div>
          
          <div class="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              id="cancel-btn"
              class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
            >
              <span id="save-text">Save Changes</span>
            </button>
          </div>
        </form>
        
        <div id="profile-error" class="hidden mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
          <p id="profile-error-text" class="text-sm text-red-800"></p>
        </div>
        
        <div id="profile-success" class="hidden mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
          <p id="profile-success-text" class="text-sm text-green-800"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { updateProfile } from '../utils/auth';
  import { authStore, initAuth } from '../stores/auth';

  // Initialize auth
  initAuth();

  const editProfileBtn = document.getElementById('edit-profile-btn');
  const editProfileModal = document.getElementById('edit-profile-modal');
  const closeModalBtn = document.getElementById('close-modal-btn');
  const cancelBtn = document.getElementById('cancel-btn');
  const profileForm = document.getElementById('profile-form') as HTMLFormElement;
  const saveText = document.getElementById('save-text');
  const profileError = document.getElementById('profile-error');
  const profileErrorText = document.getElementById('profile-error-text');
  const profileSuccess = document.getElementById('profile-success');
  const profileSuccessText = document.getElementById('profile-success-text');
  
  const userAvatar = document.getElementById('user-avatar') as HTMLImageElement;
  const userName = document.getElementById('user-name');
  const userEmail = document.getElementById('user-email');

  function showError(message: string) {
    profileErrorText!.textContent = message;
    profileError!.classList.remove('hidden');
    profileSuccess!.classList.add('hidden');
  }

  function showSuccess(message: string) {
    profileSuccessText!.textContent = message;
    profileSuccess!.classList.remove('hidden');
    profileError!.classList.add('hidden');
  }

  function hideMessages() {
    profileError!.classList.add('hidden');
    profileSuccess!.classList.add('hidden');
  }

  function openModal() {
    editProfileModal!.classList.remove('hidden');
    hideMessages();
  }

  function closeModal() {
    editProfileModal!.classList.add('hidden');
    hideMessages();
  }

  function updateUI(user: any) {
    if (user) {
      userName!.textContent = user.user_metadata?.full_name || 'Anonymous User';
      userEmail!.textContent = user.email || '';
      userAvatar.src = user.user_metadata?.avatar_url || '/images/default-avatar.svg';
      
      // Update form fields
      const fullNameInput = document.getElementById('full-name') as HTMLInputElement;
      const avatarUrlInput = document.getElementById('avatar-url') as HTMLInputElement;
      
      if (fullNameInput) fullNameInput.value = user.user_metadata?.full_name || '';
      if (avatarUrlInput) avatarUrlInput.value = user.user_metadata?.avatar_url || '';
    }
  }

  // Event listeners
  editProfileBtn?.addEventListener('click', openModal);
  closeModalBtn?.addEventListener('click', closeModal);
  cancelBtn?.addEventListener('click', closeModal);

  // Close modal when clicking outside
  editProfileModal?.addEventListener('click', (e) => {
    if (e.target === editProfileModal) {
      closeModal();
    }
  });

  profileForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(profileForm);
    const fullName = formData.get('full-name') as string;
    const avatarUrl = formData.get('avatar-url') as string;

    const submitButton = profileForm.querySelector('button[type="submit"]') as HTMLButtonElement;
    submitButton.disabled = true;
    saveText!.textContent = 'Saving...';
    hideMessages();

    try {
      const updates: any = {};
      if (fullName) updates.full_name = fullName;
      if (avatarUrl) updates.avatar_url = avatarUrl;

      const { data, error } = await updateProfile(updates);

      if (error) {
        showError(error.message);
      } else {
        showSuccess('Profile updated successfully!');
        setTimeout(() => {
          closeModal();
          // The auth store will automatically update the UI
        }, 1500);
      }
    } catch (error) {
      showError('An unexpected error occurred. Please try again.');
      console.error('Profile update error:', error);
    } finally {
      submitButton.disabled = false;
      saveText!.textContent = 'Save Changes';
    }
  });

  // Listen for auth state changes to update UI
  authStore.subscribe((authState) => {
    if (authState.user) {
      updateUI(authState.user);
    }
  });

  // Initial UI update
  const currentAuthState = authStore.get();
  if (currentAuthState.user) {
    updateUI(currentAuthState.user);
  }
</script>