---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import AuthGuard from '../../../components/AuthGuard.astro';
---

<BaseLayout title="Manage Posts - Admin">
  <AuthGuard>
    <div class="min-h-screen bg-gray-50">
      <!-- Header -->
      <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Manage Posts</h1>
              <p class="mt-1 text-sm text-gray-500">Create, edit, and manage your blog posts</p>
            </div>
            <div class="flex items-center space-x-3">
              <a href="/admin/dashboard" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Dashboard
              </a>
              <a href="/admin/posts/new" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700">
                <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                </svg>
                New Post
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
          <!-- Search and Filter Bar -->
          <div class="bg-white shadow rounded-lg mb-6">
            <div class="px-4 py-5 sm:p-6">
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0 sm:space-x-4">
                <div class="flex-1">
                  <label for="search" class="sr-only">Search posts</label>
                  <div class="relative">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                      </svg>
                    </div>
                    <input id="search" name="search" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Search posts..." type="search">
                  </div>
                </div>
                <div class="flex items-center space-x-3">
                  <select id="status-filter" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md">
                    <option value="all">All Posts</option>
                    <option value="published">Published</option>
                    <option value="draft">Drafts</option>
                  </select>
                  <select id="sort-filter" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md">
                    <option value="newest">Newest First</option>
                    <option value="oldest">Oldest First</option>
                    <option value="title">Title A-Z</option>
                  </select>
                </div>
              </div>
            </div>
          </div>

          <!-- Posts List -->
          <div class="bg-white shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
              <div id="posts-loading" class="text-center py-8">
                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
                <p class="mt-2 text-sm text-gray-500">Loading posts...</p>
              </div>
              
              <div id="posts-container" class="hidden">
                <div class="overflow-hidden">
                  <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                      <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Title
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Status
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Created
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Updated
                        </th>
                        <th scope="col" class="relative px-6 py-3">
                          <span class="sr-only">Actions</span>
                        </th>
                      </tr>
                    </thead>
                    <tbody id="posts-table-body" class="bg-white divide-y divide-gray-200">
                      <!-- Posts will be loaded here -->
                    </tbody>
                  </table>
                </div>
              </div>

              <div id="no-posts" class="hidden text-center py-8">
                <svg class="mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">No posts found</h3>
                <p class="mt-1 text-sm text-gray-500">Get started by creating your first blog post.</p>
                <div class="mt-6">
                  <a href="/admin/posts/new" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700">
                    <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    New Post
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </div>
  </AuthGuard>
</BaseLayout>

<script>
  import { supabase } from '../../../utils/supabase';

  let allPosts = [];
  let filteredPosts = [];

  async function loadPosts() {
    try {
      const { data: posts, error } = await supabase
        .from('posts')
        .select('id, title, slug, description, is_draft, created_at, updated_at')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Error loading posts:', error);
        showError('Failed to load posts');
        return;
      }

      allPosts = posts || [];
      filteredPosts = [...allPosts];
      renderPosts();
    } catch (error) {
      console.error('Error loading posts:', error);
      showError('Failed to load posts');
    }
  }

  function renderPosts() {
    const loadingEl = document.getElementById('posts-loading');
    const containerEl = document.getElementById('posts-container');
    const noPostsEl = document.getElementById('no-posts');
    const tableBodyEl = document.getElementById('posts-table-body');

    loadingEl?.classList.add('hidden');

    if (filteredPosts.length === 0) {
      containerEl?.classList.add('hidden');
      noPostsEl?.classList.remove('hidden');
      return;
    }

    noPostsEl?.classList.add('hidden');
    containerEl?.classList.remove('hidden');

    if (tableBodyEl) {
      tableBodyEl.innerHTML = filteredPosts.map(post => `
        <tr>
          <td class="px-6 py-4 whitespace-nowrap">
            <div class="flex items-center">
              <div>
                <div class="text-sm font-medium text-gray-900">
                  <a href="/admin/posts/${post.id}/edit" class="hover:text-indigo-600">
                    ${post.title}
                  </a>
                </div>
                <div class="text-sm text-gray-500">
                  ${post.description ? post.description.substring(0, 100) + '...' : 'No description'}
                </div>
              </div>
            </div>
          </td>
          <td class="px-6 py-4 whitespace-nowrap">
            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
              !post.is_draft 
                ? 'bg-green-100 text-green-800' 
                : 'bg-yellow-100 text-yellow-800'
            }">
              ${!post.is_draft ? 'Published' : 'Draft'}
            </span>
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(post.created_at).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
            ${new Date(post.updated_at).toLocaleDateString()}
          </td>
          <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
            <div class="flex items-center justify-end space-x-2">
              <a href="/blog/${post.slug}" target="_blank" class="text-indigo-600 hover:text-indigo-900">View</a>
              <a href="/admin/posts/${post.id}/edit" class="text-indigo-600 hover:text-indigo-900">Edit</a>
              <button onclick="deletePost('${post.id}')" class="text-red-600 hover:text-red-900">Delete</button>
            </div>
          </td>
        </tr>
      `).join('');
    }
  }

  function filterPosts() {
    const searchTerm = (document.getElementById('search') as HTMLInputElement)?.value.toLowerCase() || '';
    const statusFilter = (document.getElementById('status-filter') as HTMLSelectElement)?.value || 'all';
    const sortFilter = (document.getElementById('sort-filter') as HTMLSelectElement)?.value || 'newest';

    // Filter by search term
    filteredPosts = allPosts.filter(post => 
      post.title.toLowerCase().includes(searchTerm) ||
      (post.description && post.description.toLowerCase().includes(searchTerm))
    );

    // Filter by status
    if (statusFilter !== 'all') {
      filteredPosts = filteredPosts.filter(post => 
        statusFilter === 'published' ? !post.is_draft : post.is_draft
      );
    }

    // Sort posts
    filteredPosts.sort((a, b) => {
      switch (sortFilter) {
        case 'oldest':
          return new Date(a.created_at).getTime() - new Date(b.created_at).getTime();
        case 'title':
          return a.title.localeCompare(b.title);
        case 'newest':
        default:
          return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
      }
    });

    renderPosts();
  }

  async function deletePost(postId: string) {
    if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
      return;
    }

    try {
      const { error } = await supabase
        .from('posts')
        .delete()
        .eq('id', postId);

      if (error) {
        console.error('Error deleting post:', error);
        showError('Failed to delete post');
        return;
      }

      // Remove from local arrays
      allPosts = allPosts.filter(post => post.id !== postId);
      filteredPosts = filteredPosts.filter(post => post.id !== postId);
      renderPosts();
      showSuccess('Post deleted successfully');
    } catch (error) {
      console.error('Error deleting post:', error);
      showError('Failed to delete post');
    }
  }

  function showError(message: string) {
    // Simple error display - could be enhanced with a toast system
    alert('Error: ' + message);
  }

  function showSuccess(message: string) {
    // Simple success display - could be enhanced with a toast system
    alert('Success: ' + message);
  }

  // Make deletePost available globally
  (window as any).deletePost = deletePost;

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    loadPosts();

    // Search and filter event listeners
    document.getElementById('search')?.addEventListener('input', filterPosts);
    document.getElementById('status-filter')?.addEventListener('change', filterPosts);
    document.getElementById('sort-filter')?.addEventListener('change', filterPosts);
  });
</script>