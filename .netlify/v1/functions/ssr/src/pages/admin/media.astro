---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AuthGuard from '../../components/AuthGuard.astro';
---

<BaseLayout title="Media Library - Admin">
  <AuthGuard>
    <div class="min-h-screen bg-gray-50">
      <!-- Header -->
      <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Media Library</h1>
              <p class="mt-1 text-sm text-gray-500">Manage your uploaded images and files</p>
            </div>
            <div class="flex items-center space-x-3">
              <a href="/admin/dashboard" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Dashboard
              </a>
              <button id="upload-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                Upload Files
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Hidden File Input -->
      <input id="file-upload" name="file-upload" type="file" class="hidden" multiple accept="image/*,.pdf,.doc,.docx,.txt">

      <!-- Filters and Search -->
      <div class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
          <div class="bg-white shadow rounded-lg p-6">
            <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-4 sm:space-y-0">
              <!-- Search -->
              <div class="flex-1 max-w-lg">
                <label for="search" class="sr-only">Search files</label>
                <div class="relative">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <input id="search" name="search" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500" placeholder="Search files..." type="search">
                </div>
              </div>

              <!-- Filters -->
              <div class="flex items-center space-x-4">
                <select id="type-filter" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md">
                  <option value="">All Types</option>
                  <option value="image">Images</option>
                  <option value="document">Documents</option>
                </select>

                <select id="sort-by" class="block w-full pl-3 pr-10 py-2 text-base border border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md">
                  <option value="created_at-desc">Newest First</option>
                  <option value="created_at-asc">Oldest First</option>
                  <option value="name-asc">Name A-Z</option>
                  <option value="name-desc">Name Z-A</option>
                  <option value="size-desc">Largest First</option>
                  <option value="size-asc">Smallest First</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Media Grid -->
      <main class="max-w-7xl mx-auto pb-6 sm:px-6 lg:px-8">
        <div class="px-4 sm:px-0">
          <!-- Loading State -->
          <div id="loading-state" class="bg-white shadow rounded-lg p-6">
            <div class="animate-pulse">
              <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
                <div class="aspect-square bg-gray-200 rounded-lg"></div>
              </div>
            </div>
          </div>

          <!-- Empty State -->
          <div id="empty-state" class="hidden bg-white shadow rounded-lg p-12 text-center">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">No media files</h3>
            <p class="mt-1 text-sm text-gray-500">Get started by uploading your first file.</p>
            <div class="mt-6">
              <button id="empty-upload-btn" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                </svg>
                Upload Files
              </button>
            </div>
          </div>

          <!-- Media Grid -->
          <div id="media-grid" class="hidden bg-white shadow rounded-lg p-6">
            <div id="media-container" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
              <!-- Media items will be inserted here -->
            </div>
          </div>
        </div>
      </main>
    </div>

    <!-- Media Detail Modal -->
    <div id="media-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-11/12 max-w-4xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <!-- Modal Header -->
          <div class="flex items-center justify-between pb-4 border-b">
            <h3 class="text-lg font-medium text-gray-900">Media Details</h3>
            <button id="close-modal" class="text-gray-400 hover:text-gray-600">
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>

          <!-- Modal Content -->
          <div class="mt-4 grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Preview -->
            <div>
              <div id="media-preview" class="border rounded-lg p-4 bg-gray-50 min-h-64 flex items-center justify-center">
                <!-- Preview content will be inserted here -->
              </div>
            </div>

            <!-- Details -->
            <div class="space-y-4">
              <div>
                <label class="block text-sm font-medium text-gray-700">File Name</label>
                <input id="modal-filename" type="text" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700">Alt Text</label>
                <input id="modal-alt-text" type="text" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Describe this image...">
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700">URL</label>
                <div class="mt-1 flex rounded-md shadow-sm">
                  <input id="modal-url" type="text" readonly class="flex-1 block w-full border border-gray-300 rounded-l-md shadow-sm py-2 px-3 bg-gray-50 text-gray-500">
                  <button id="copy-url" class="inline-flex items-center px-3 py-2 border border-l-0 border-gray-300 rounded-r-md bg-gray-50 text-gray-500 hover:bg-gray-100">
                    <svg class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                  </button>
                </div>
              </div>

              <div class="grid grid-cols-2 gap-4 text-sm text-gray-600">
                <div>
                  <span class="font-medium">File Size:</span>
                  <span id="modal-size">-</span>
                </div>
                <div>
                  <span class="font-medium">Type:</span>
                  <span id="modal-type">-</span>
                </div>
                <div>
                  <span class="font-medium">Uploaded:</span>
                  <span id="modal-uploaded">-</span>
                </div>
                <div>
                  <span class="font-medium">Dimensions:</span>
                  <span id="modal-dimensions">-</span>
                </div>
              </div>

              <!-- Actions -->
              <div class="flex items-center justify-between pt-4 border-t">
                <button id="update-media" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700">
                  Update
                </button>
                <button id="delete-media" class="inline-flex items-center px-4 py-2 border border-red-300 text-sm font-medium rounded-md text-red-700 bg-white hover:bg-red-50">
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </AuthGuard>
</BaseLayout>

<script>
  import { supabase } from '../../utils/supabase';

  let mediaFiles: any[] = [];
  let filteredFiles: any[] = [];
  let currentMedia: any = null;

  async function formatFileSize(bytes: number): Promise<string> {
    const { formatFileSize: utilFormatFileSize } = await import('../../utils/media');
    return utilFormatFileSize(bytes);
  }

  async function getFileType(mimeType: string): Promise<string> {
    const { getFileType: utilGetFileType } = await import('../../utils/media');
    return utilGetFileType(mimeType);
  }

  function createLoadingMediaItem(filename: string, tempId: string): string {
    return `
      <div class="media-item group relative bg-white border border-gray-200 rounded-lg overflow-hidden transition-shadow" data-temp-id="${tempId}">
        <div class="aspect-square bg-gray-100 relative overflow-hidden flex items-center justify-center">
          <div class="text-center">
            <svg class="animate-spin h-6 w-6 text-gray-400 mx-auto mb-2" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="text-xs text-gray-500">Uploading...</p>
          </div>
        </div>
        <div class="p-2">
          <p class="text-xs font-medium text-gray-900 truncate" title="${filename}">${filename}</p>
          <p class="text-xs text-gray-500">Processing...</p>
        </div>
      </div>
    `;
  }

  async function createMediaItem(file: any): Promise<string> {
    const isImage = file.mime_type?.startsWith('image/');
    const formattedSize = await formatFileSize(file.file_size || 0);
    
    // Debug: Log the URL being used for thumbnails
    console.log('Creating media item for:', file.filename, 'URL:', file.file_path);
    
    return `
      <div class="media-item group relative bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow cursor-pointer" data-id="${file.id}">
        <div class="aspect-square bg-gray-100 relative overflow-hidden">
          ${isImage 
            ? `<img src="${file.file_path}" alt="${file.alt_text || file.filename}" class="w-full h-full object-contain" loading="lazy" onerror="console.error('Failed to load image:', '${file.file_path}'); this.style.display='none'; this.nextElementSibling.style.display='flex';" onload="console.log('Successfully loaded image:', '${file.file_path}');"><div class="w-full h-full flex items-center justify-center" style="display:none;"><svg class="h-8 w-8 text-red-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /></svg></div>`
            : `<div class="w-full h-full flex items-center justify-center">
                 <svg class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                 </svg>
               </div>`
          }
        </div>
        <div class="p-2">
          <p class="text-xs font-medium text-gray-900 truncate" title="${file.filename}">${file.filename}</p>
          <p class="text-xs text-gray-500">${formattedSize}</p>
        </div>
        <div class="absolute inset-0 bg-gray-900 bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-200 flex items-center justify-center">
          <div class="opacity-0 group-hover:opacity-100 transition-opacity">
            <svg class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          </div>
        </div>
      </div>
    `;
  }

  async function renderMediaGrid() {
    const container = document.getElementById('media-container');
    const loadingState = document.getElementById('loading-state');
    const emptyState = document.getElementById('empty-state');
    const mediaGrid = document.getElementById('media-grid');

    if (!container || !loadingState || !emptyState || !mediaGrid) return;

    loadingState.classList.add('hidden');

    if (filteredFiles.length === 0) {
      mediaGrid.classList.add('hidden');
      emptyState.classList.remove('hidden');
    } else {
      emptyState.classList.add('hidden');
      mediaGrid.classList.remove('hidden');
      const mediaItems = await Promise.all(filteredFiles.map(file => createMediaItem(file)));
      container.innerHTML = mediaItems.join('');
      
      // Add click listeners to media items
      container.querySelectorAll('.media-item').forEach(item => {
        item.addEventListener('click', async () => {
          const id = item.getAttribute('data-id');
          const media = mediaFiles.find(f => f.id === id);
          if (media) {
            await showMediaModal(media);
          }
        });
      });
    }
  }

  async function filterAndSortFiles() {
    const searchTerm = (document.getElementById('search') as HTMLInputElement)?.value.toLowerCase() || '';
    const typeFilter = (document.getElementById('type-filter') as HTMLSelectElement)?.value || '';
    const sortBy = (document.getElementById('sort-by') as HTMLSelectElement)?.value || 'created_at-desc';

    // Filter
    const filteredPromises = mediaFiles.map(async file => {
      const matchesSearch = !searchTerm || file.filename.toLowerCase().includes(searchTerm);
      const fileType = await getFileType(file.mime_type || '');
      const matchesType = !typeFilter || fileType === typeFilter;
      return matchesSearch && matchesType ? file : null;
    });
    
    const filteredResults = await Promise.all(filteredPromises);
    filteredFiles = filteredResults.filter(file => file !== null);

    // Sort
    const [field, direction] = sortBy.split('-');
    filteredFiles.sort((a, b) => {
      let aVal, bVal;
      
      switch (field) {
        case 'name':
          aVal = a.filename.toLowerCase();
          bVal = b.filename.toLowerCase();
          break;
        case 'size':
          aVal = a.file_size || 0;
          bVal = b.file_size || 0;
          break;
        case 'created_at':
        default:
          aVal = new Date(a.created_at).getTime();
          bVal = new Date(b.created_at).getTime();
          break;
      }

      if (direction === 'desc') {
        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;
      } else {
        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;
      }
    });

    await renderMediaGrid();
  }

  async function loadMediaFiles() {
    try {
      const loadingState = document.getElementById('loading-state');
      if (loadingState) loadingState.classList.remove('hidden');

      const { getMediaFiles } = await import('../../utils/media');
      const result = await getMediaFiles();
      
      if (result.success && result.media) {
        mediaFiles = result.media.map(media => ({
          id: media.id,
          filename: media.filename,
          original_filename: media.original_filename,
          file_path: media.file_path, // Changed property name
          file_size: media.file_size,
          mime_type: media.mime_type,
          width: media.width,
          height: media.height,
          alt_text: media.alt_text,
          caption: media.caption,
          created_at: media.created_at,
          updated_at: media.updated_at
        }));
        filteredFiles = [...mediaFiles];
      } else {
        console.error('Error loading media files:', result.error);
        mediaFiles = [];
        filteredFiles = [];
      }
      
      if (loadingState) loadingState.classList.add('hidden');
      await renderMediaGrid();
    } catch (error) {
      console.error('Error loading media files:', error);
      const loadingState = document.getElementById('loading-state');
      if (loadingState) loadingState.classList.add('hidden');
      alert('Error loading media files: ' + (error instanceof Error ? error.message : 'Unknown error'));
    }
  }

  async function showMediaModal(media: any) {
    currentMedia = media;
    const modal = document.getElementById('media-modal');
    const preview = document.getElementById('media-preview');
    const filename = document.getElementById('modal-filename') as HTMLInputElement;
    const altText = document.getElementById('modal-alt-text') as HTMLInputElement;
    const url = document.getElementById('modal-url') as HTMLInputElement;
    const size = document.getElementById('modal-size');
    const type = document.getElementById('modal-type');
    const uploaded = document.getElementById('modal-uploaded');
    const dimensions = document.getElementById('modal-dimensions');

    if (!modal || !preview) return;

    // Populate modal
    if (filename) filename.value = media.filename || '';
    if (altText) altText.value = media.alt_text || '';
    if (url) url.value = media.url || '';
    if (size) size.textContent = await formatFileSize(media.file_size || 0);
    if (type) type.textContent = await getFileType(media.mime_type || '') || 'Unknown';
    if (uploaded) uploaded.textContent = new Date(media.created_at).toLocaleDateString();
    if (dimensions) dimensions.textContent = media.width && media.height ? `${media.width} × ${media.height}` : 'N/A';

    // Show preview
    const isImage = media.mime_type?.startsWith('image/');
    preview.innerHTML = isImage 
      ? `<img src="${media.file_path}" alt="${media.alt_text || media.filename}" class="max-w-full max-h-full object-contain">` 
      : `<div class="flex flex-col items-center justify-center text-gray-500">
           <svg class="h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
           </svg>
           <p class="text-sm">${media.filename}</p>
         </div>`;

    modal.classList.remove('hidden');
  }

  function hideMediaModal() {
    const modal = document.getElementById('media-modal');
    if (modal) {
      modal.classList.add('hidden');
      currentMedia = null;
    }
  }



  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Load media files
    loadMediaFiles();

    // Upload button - directly trigger file input
    document.getElementById('upload-btn')?.addEventListener('click', () => {
      document.getElementById('file-upload')?.click();
    });
    document.getElementById('empty-upload-btn')?.addEventListener('click', () => {
      document.getElementById('file-upload')?.click();
    });

    // Search and filters
    document.getElementById('search')?.addEventListener('input', () => filterAndSortFiles());
    document.getElementById('type-filter')?.addEventListener('change', () => filterAndSortFiles());
    document.getElementById('sort-by')?.addEventListener('change', () => filterAndSortFiles());

    // Modal
    document.getElementById('close-modal')?.addEventListener('click', hideMediaModal);
    
    // Copy URL
    document.getElementById('copy-url')?.addEventListener('click', () => {
      const urlInput = document.getElementById('modal-url') as HTMLInputElement;
      if (urlInput) {
        urlInput.select();
        document.execCommand('copy');
        alert('URL copied to clipboard!');
      }
    });

    // File upload handling
    const fileInput = document.getElementById('file-upload') as HTMLInputElement;
    const dropZone = document.getElementById('drop-zone');
    const uploadProgress = document.getElementById('upload-progress');
    const progressBar = document.getElementById('progress-bar');
    const progressText = document.getElementById('upload-status');

    async function handleFileUpload(files: FileList) {
      const { uploadMedia, validateFile } = await import('../../utils/media');
      const mediaGrid = document.getElementById('media-grid');
      const container = document.getElementById('media-container');
      const emptyState = document.getElementById('empty-state');
      
      if (!container) return;
      
      // Show media grid if it was hidden
      if (mediaGrid) mediaGrid.classList.remove('hidden');
      if (emptyState) emptyState.classList.add('hidden');
      
      // Process each file
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const tempId = `temp-${Date.now()}-${i}`;
        
        // Validate file
        const validation = validateFile(file);
        if (!validation.valid) {
          alert(`Invalid file: ${file.name}. ${validation.error}`);
          continue;
        }
        
        // Immediately add loading thumbnail to the grid
        const loadingThumbnail = createLoadingMediaItem(file.name, tempId);
        container.insertAdjacentHTML('afterbegin', loadingThumbnail);
        
        try {
          // Upload the file
          const result = await uploadMedia(file);
          
          if (result.success && result.media) {
            // Remove loading thumbnail
            const loadingElement = document.querySelector(`[data-temp-id="${tempId}"]`);
            if (loadingElement) {
              loadingElement.remove();
            }
            
            // Add the actual media item
            const mediaItem = await createMediaItem({
              id: result.media.id,
              filename: result.media.filename,
              original_filename: result.media.original_filename,
              url: result.media.file_path,
              file_size: result.media.file_size,
              mime_type: result.media.mime_type,
              width: result.media.width,
              height: result.media.height,
              alt_text: result.media.alt_text,
              caption: result.media.caption,
              created_at: result.media.created_at,
              updated_at: result.media.updated_at
            });
            
            container.insertAdjacentHTML('afterbegin', mediaItem);
            
            // Add click listener to the new item
            const newItem = container.querySelector('.media-item');
            if (newItem) {
              newItem.addEventListener('click', async () => {
                const id = newItem.getAttribute('data-id');
                const media = mediaFiles.find(f => f.id === id) || {
                  id: result.media.id,
                  filename: result.media.filename,
                  original_filename: result.media.original_filename,
                  url: result.media.file_path,
                  file_size: result.media.file_size,
                  mime_type: result.media.mime_type,
                  width: result.media.width,
                  height: result.media.height,
                  alt_text: result.media.alt_text,
                  caption: result.media.caption,
                  created_at: result.media.created_at,
                  updated_at: result.media.updated_at
                };
                await showMediaModal(media);
              });
            }
            
            // Update mediaFiles array
            // In the upload handler, when adding to mediaFiles:
            mediaFiles.unshift({
              id: result.media.id,
              filename: result.media.filename,
              original_filename: result.media.original_filename,
              file_path: result.media.file_path,  // Changed from url
              file_size: result.media.file_size,
              mime_type: result.media.mime_type,
              width: result.media.width,
              height: result.media.height,
              alt_text: result.media.alt_text,
              caption: result.media.caption,
              created_at: result.media.created_at,
              updated_at: result.media.updated_at
            });
            filteredFiles = [...mediaFiles];
            
          } else {
            // Remove loading thumbnail and show error
            const loadingElement = document.querySelector(`[data-temp-id="${tempId}"]`);
            if (loadingElement) {
              loadingElement.remove();
            }
            alert(`Upload failed for ${file.name}: ${result.error}`);
          }
        } catch (error) {
          // Remove loading thumbnail and show error
          const loadingElement = document.querySelector(`[data-temp-id="${tempId}"]`);
          if (loadingElement) {
            loadingElement.remove();
          }
          alert(`Upload failed for ${file.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
      
      // Reset file input
      if (fileInput) {
        fileInput.value = '';
      }
    }

    if (fileInput) {
      fileInput.addEventListener('change', (e) => {
        const files = (e.target as HTMLInputElement).files;
        if (files && files.length > 0) {
          handleFileUpload(files);
        }
      });

      // Drag and drop on the entire page
      document.addEventListener('dragover', (e) => {
        e.preventDefault();
      });

      document.addEventListener('drop', (e) => {
        e.preventDefault();
        const files = e.dataTransfer?.files;
        if (files && files.length > 0) {
          handleFileUpload(files);
        }
      });
    }

    // Modal actions
    document.getElementById('update-media')?.addEventListener('click', async () => {
      if (!currentMedia) return;
      
      const filename = (document.getElementById('modal-filename') as HTMLInputElement)?.value;
      const altText = (document.getElementById('modal-alt-text') as HTMLInputElement)?.value;
      
      try {
        const { updateMedia } = await import('../../utils/media');
        const result = await updateMedia(currentMedia.id, {
          filename: filename || undefined,
          alt_text: altText || undefined
        });
        
        if (result.success) {
          // Update the current media object
          if (result.media) {
            currentMedia = {
              ...currentMedia,
              filename: result.media.filename,
              alt_text: result.media.alt_text
            };
          }
          
          // Reload media files to reflect changes
          await loadMediaFiles();
          hideMediaModal();
          alert('Media updated successfully!');
        } else {
          alert('Error updating media: ' + result.error);
        }
      } catch (error) {
        alert('Error updating media: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    });

    document.getElementById('delete-media')?.addEventListener('click', async () => {
      if (!currentMedia) return;
      
      if (confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
        try {
          const { deleteMedia } = await import('../../utils/media');
          const result = await deleteMedia(currentMedia.id);
          
          if (result.success) {
            // Reload media files to reflect changes
            await loadMediaFiles();
            hideMediaModal();
            alert('Media deleted successfully!');
          } else {
            alert('Error deleting media: ' + result.error);
          }
        } catch (error) {
          alert('Error deleting media: ' + (error instanceof Error ? error.message : 'Unknown error'));
        }
      }
    });
  });
</script>