import { d as createComponent, i as renderComponent, j as renderScript, r as renderTemplate, m as maybeRenderHead } from '../../../chunks/astro/server_YFC6y_Dz.mjs';
import 'kleur/colors';
import { $ as $$BaseLayout } from '../../../chunks/BaseLayout_D-9eq0G_.mjs';
import { $ as $$AuthGuard } from '../../../chunks/AuthGuard_nRtvr6tJ.mjs';
export { renderers } from '../../../renderers.mjs';

const $$New = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate`${renderComponent($$result, "BaseLayout", $$BaseLayout, { "title": "Create New Post - Admin" }, { "default": async ($$result2) => renderTemplate` ${renderComponent($$result2, "AuthGuard", $$AuthGuard, {}, { "default": async ($$result3) => renderTemplate` ${maybeRenderHead()}<div class="min-h-screen bg-gray-50"> <!-- Header --> <div class="bg-white shadow"> <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8"> <div class="flex items-center justify-between"> <div> <h1 class="text-3xl font-bold text-gray-900">Create New Post</h1> <p class="mt-1 text-sm text-gray-500">Write and publish a new blog post</p> </div> <div class="flex items-center space-x-3"> <a href="/admin/posts" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"> <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path> </svg>
Back to Posts
</a> </div> </div> </div> </div> <!-- Main Content --> <main class="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8"> <div class="px-4 py-6 sm:px-0"> <form id="post-form" class="space-y-6"> <!-- Basic Information --> <div class="bg-white shadow rounded-lg"> <div class="px-4 py-5 sm:p-6"> <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Basic Information</h3> <div class="grid grid-cols-1 gap-6"> <!-- Title --> <div> <label for="title" class="block text-sm font-medium text-gray-700">Title *</label> <input type="text" name="title" id="title" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Enter post title"> </div> <!-- Slug --> <div> <label for="slug" class="block text-sm font-medium text-gray-700">Slug *</label> <input type="text" name="slug" id="slug" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="post-url-slug"> <p class="mt-1 text-sm text-gray-500">URL-friendly version of the title. Will be auto-generated if left empty.</p> </div> <!-- Excerpt --> <div> <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label> <textarea name="excerpt" id="excerpt" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Brief description of the post (optional)"></textarea> </div> <!-- Tags --> <div> <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label> <input type="text" name="tags" id="tags" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="tag1, tag2, tag3"> <p class="mt-1 text-sm text-gray-500">Separate tags with commas</p> </div> </div> </div> </div> <!-- Content --> <div class="bg-white shadow rounded-lg"> <div class="px-4 py-5 sm:p-6"> <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Content</h3> <div> <label for="content" class="block text-sm font-medium text-gray-700">Post Content *</label> <textarea name="content" id="content" required rows="20" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 font-mono text-sm" placeholder="Write your post content in Markdown..."></textarea> <p class="mt-1 text-sm text-gray-500">You can use Markdown formatting. HTML is also supported.</p> </div> </div> </div> <!-- Publishing Options --> <div class="bg-white shadow rounded-lg"> <div class="px-4 py-5 sm:p-6"> <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Publishing Options</h3> <div class="space-y-4"> <!-- Featured Image URL --> <div> <label for="featured_image" class="block text-sm font-medium text-gray-700">Featured Image URL</label> <input type="url" name="featured_image" id="featured_image" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="https://example.com/image.jpg"> </div> <!-- Published Status --> <div class="flex items-center"> <input id="published" name="published" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"> <label for="published" class="ml-2 block text-sm text-gray-900">
Publish immediately
</label> </div> <p class="text-sm text-gray-500">If unchecked, the post will be saved as a draft.</p> </div> </div> </div> <!-- Action Buttons --> <div class="bg-white shadow rounded-lg"> <div class="px-4 py-5 sm:p-6"> <div class="flex items-center justify-between"> <div class="flex items-center space-x-3"> <button type="button" id="preview-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"> <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path> </svg>
Preview
</button> </div> <div class="flex items-center space-x-3"> <button type="button" id="save-draft-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"> <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12"></path> </svg>
Save Draft
</button> <button type="submit" id="publish-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"> <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path> </svg> <span id="publish-btn-text">Create Post</span> </button> </div> </div> </div> </div> </form> </div> </main> </div>  <div id="loading-overlay" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50"> <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white"> <div class="mt-3 text-center"> <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-indigo-100"> <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600"></div> </div> <h3 class="text-lg font-medium text-gray-900 mt-2">Creating Post...</h3> <p class="text-sm text-gray-500 mt-1">Please wait while we save your post.</p> </div> </div> </div> ` })} ` })} ${renderScript($$result, "C:/Users/James/_myApps/day154/my-blog/src/pages/admin/posts/new.astro?astro&type=script&index=0&lang.ts")}`;
}, "C:/Users/James/_myApps/day154/my-blog/src/pages/admin/posts/new.astro", void 0);

const $$file = "C:/Users/James/_myApps/day154/my-blog/src/pages/admin/posts/new.astro";
const $$url = "/admin/posts/new";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$New,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
