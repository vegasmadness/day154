---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import AuthGuard from '../../../components/AuthGuard.astro';
---

<BaseLayout title="Create New Post - Admin">
  <AuthGuard>
    <div class="min-h-screen bg-gray-50">
      <!-- Header -->
      <div class="bg-white shadow">
        <div class="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Create New Post</h1>
              <p class="mt-1 text-sm text-gray-500">Write and publish a new blog post</p>
            </div>
            <div class="flex items-center space-x-3">
              <a href="/admin/posts" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Posts
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main class="max-w-4xl mx-auto py-6 sm:px-6 lg:px-8">
        <div class="px-4 py-6 sm:px-0">
          <form id="post-form" class="space-y-6">
            <!-- Basic Information -->
            <div class="bg-white shadow rounded-lg">
              <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Basic Information</h3>
                
                <div class="grid grid-cols-1 gap-6">
                  <!-- Title -->
                  <div>
                    <label for="title" class="block text-sm font-medium text-gray-700">Title *</label>
                    <input type="text" name="title" id="title" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Enter post title">
                  </div>

                  <!-- Slug -->
                  <div>
                    <label for="slug" class="block text-sm font-medium text-gray-700">Slug *</label>
                    <input type="text" name="slug" id="slug" required class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="post-url-slug">
                    <p class="mt-1 text-sm text-gray-500">URL-friendly version of the title. Will be auto-generated if left empty.</p>
                  </div>

                  <!-- Excerpt -->
                  <div>
                    <label for="excerpt" class="block text-sm font-medium text-gray-700">Excerpt</label>
                    <textarea name="excerpt" id="excerpt" rows="3" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="Brief description of the post (optional)"></textarea>
                  </div>

                  <!-- Tags -->
                  <div>
                    <label for="tags" class="block text-sm font-medium text-gray-700">Tags</label>
                    <input type="text" name="tags" id="tags" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="tag1, tag2, tag3">
                    <p class="mt-1 text-sm text-gray-500">Separate tags with commas</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Content -->
            <div class="bg-white shadow rounded-lg">
              <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Content</h3>
                
                <div>
                  <label for="content" class="block text-sm font-medium text-gray-700">Post Content *</label>
                  <textarea name="content" id="content" required rows="20" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 font-mono text-sm" placeholder="Write your post content in Markdown..."></textarea>
                  <p class="mt-1 text-sm text-gray-500">You can use Markdown formatting. HTML is also supported.</p>
                </div>
              </div>
            </div>

            <!-- Publishing Options -->
            <div class="bg-white shadow rounded-lg">
              <div class="px-4 py-5 sm:p-6">
                <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Publishing Options</h3>
                
                <div class="space-y-4">
                  <!-- Featured Image URL -->
                  <div>
                    <label for="featured_image" class="block text-sm font-medium text-gray-700">Featured Image URL</label>
                    <input type="url" name="featured_image" id="featured_image" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" placeholder="https://example.com/image.jpg">
                  </div>

                  <!-- Published Status -->
                  <div class="flex items-center">
                    <input id="published" name="published" type="checkbox" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                    <label for="published" class="ml-2 block text-sm text-gray-900">
                      Publish immediately
                    </label>
                  </div>
                  <p class="text-sm text-gray-500">If unchecked, the post will be saved as a draft.</p>
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="bg-white shadow rounded-lg">
              <div class="px-4 py-5 sm:p-6">
                <div class="flex items-center justify-between">
                  <div class="flex items-center space-x-3">
                    <button type="button" id="preview-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                      <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                      </svg>
                      Preview
                    </button>
                  </div>
                  
                  <div class="flex items-center space-x-3">
                    <button type="button" id="save-draft-btn" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                      <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3-3m0 0l-3 3m3-3v12" />
                      </svg>
                      Save Draft
                    </button>
                    
                    <button type="submit" id="publish-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                      <svg class="-ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8" />
                      </svg>
                      <span id="publish-btn-text">Create Post</span>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </form>
        </div>
      </main>
    </div>

    <!-- Loading Overlay -->
    <div id="loading-overlay" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3 text-center">
          <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-indigo-100">
            <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-600"></div>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mt-2">Creating Post...</h3>
          <p class="text-sm text-gray-500 mt-1">Please wait while we save your post.</p>
        </div>
      </div>
    </div>
  </AuthGuard>
</BaseLayout>

<script>
  import { supabase } from '../../../utils/supabase';

  let isSubmitting = false;

  function generateSlug(title: string): string {
    return title
      .toLowerCase()
      .replace(/[^a-z0-9 -]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
  }

  function showLoading() {
    document.getElementById('loading-overlay')?.classList.remove('hidden');
  }

  function hideLoading() {
    document.getElementById('loading-overlay')?.classList.add('hidden');
  }

  function showError(message: string) {
    hideLoading();
    alert('Error: ' + message);
  }

  function showSuccess(message: string) {
    hideLoading();
    alert('Success: ' + message);
  }

  async function createPost(postData: any, published: boolean = false) {
    try {
      showLoading();
      
      // Get current user
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        throw new Error('You must be logged in to create posts');
      }

      // Prepare post data
      const post = {
        title: postData.title,
        slug: postData.slug || generateSlug(postData.title),
        content: postData.content,
        description: postData.excerpt || null,
        hero_image: postData.featured_image || null,
        is_draft: !published,
        published_at: published ? new Date().toISOString() : null,
        author_id: user.id
      };

      // Create the post
      const { data: newPost, error: postError } = await supabase
        .from('posts')
        .insert([post])
        .select()
        .single();

      if (postError) {
        throw postError;
      }

      // Handle tags if provided
      if (postData.tags && postData.tags.trim()) {
        const tagNames = postData.tags.split(',').map((tag: string) => tag.trim()).filter(Boolean);
        
        for (const tagName of tagNames) {
          // Insert or get existing tag
          const { data: existingTag } = await supabase
            .from('tags')
            .select('id')
            .eq('name', tagName)
            .single();

          let tagId;
          if (existingTag) {
            tagId = existingTag.id;
          } else {
            const { data: newTag, error: tagError } = await supabase
              .from('tags')
              .insert([{ name: tagName }])
              .select('id')
              .single();
            
            if (tagError) {
              console.error('Error creating tag:', tagError);
              continue;
            }
            tagId = newTag.id;
          }

          // Create post-tag relationship
          await supabase
            .from('post_tags')
            .insert([{ post_id: newPost.id, tag_id: tagId }]);
        }
      }

      showSuccess(`Post ${published ? 'published' : 'saved as draft'} successfully!`);
      
      // Redirect to posts list after a short delay
      setTimeout(() => {
        window.location.href = '/admin/posts';
      }, 1500);

    } catch (error) {
      console.error('Error creating post:', error);
      showError(error.message || 'Failed to create post');
    }
  }

  function getFormData() {
    const form = document.getElementById('post-form') as HTMLFormElement;
    const formData = new FormData(form);
    
    return {
      title: formData.get('title') as string,
      slug: formData.get('slug') as string,
      content: formData.get('content') as string,
      excerpt: formData.get('excerpt') as string,
      tags: formData.get('tags') as string,
      featured_image: formData.get('featured_image') as string,
      published: formData.get('published') === 'on'
    };
  }

  function validateForm(data: any): string | null {
    if (!data.title?.trim()) {
      return 'Title is required';
    }
    if (!data.content?.trim()) {
      return 'Content is required';
    }
    return null;
  }

  // Event listeners
  document.addEventListener('DOMContentLoaded', () => {
    const titleInput = document.getElementById('title') as HTMLInputElement;
    const slugInput = document.getElementById('slug') as HTMLInputElement;
    const form = document.getElementById('post-form') as HTMLFormElement;
    const saveDraftBtn = document.getElementById('save-draft-btn');
    const publishBtn = document.getElementById('publish-btn');
    const publishBtnText = document.getElementById('publish-btn-text');
    const publishedCheckbox = document.getElementById('published') as HTMLInputElement;

    // Auto-generate slug from title
    titleInput?.addEventListener('input', (e) => {
      const title = (e.target as HTMLInputElement).value;
      if (title && !slugInput.value) {
        slugInput.value = generateSlug(title);
      }
    });

    // Update publish button text based on checkbox
    publishedCheckbox?.addEventListener('change', (e) => {
      const isChecked = (e.target as HTMLInputElement).checked;
      if (publishBtnText) {
        publishBtnText.textContent = isChecked ? 'Publish Post' : 'Create Post';
      }
    });

    // Save as draft
    saveDraftBtn?.addEventListener('click', async (e) => {
      e.preventDefault();
      if (isSubmitting) return;
      
      const data = getFormData();
      const error = validateForm(data);
      if (error) {
        showError(error);
        return;
      }

      isSubmitting = true;
      await createPost(data, false);
      isSubmitting = false;
    });

    // Form submission (publish or create)
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      if (isSubmitting) return;
      
      const data = getFormData();
      const error = validateForm(data);
      if (error) {
        showError(error);
        return;
      }

      isSubmitting = true;
      await createPost(data, data.published);
      isSubmitting = false;
    });

    // Preview functionality (basic implementation)
    document.getElementById('preview-btn')?.addEventListener('click', () => {
      const data = getFormData();
      if (!data.title || !data.content) {
        showError('Please fill in title and content to preview');
        return;
      }
      
      // Open preview in new window/tab
      const previewWindow = window.open('', '_blank');
      if (previewWindow) {
        previewWindow.document.write(`
          <!DOCTYPE html>
          <html>
          <head>
            <title>Preview: ${data.title}</title>
            <style>
              body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 2rem; line-height: 1.6; }
              h1 { color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 0.5rem; }
              .meta { color: #6b7280; font-size: 0.875rem; margin-bottom: 2rem; }
              .content { white-space: pre-wrap; }
            </style>
          </head>
          <body>
            <h1>${data.title}</h1>
            <div class="meta">
              ${data.excerpt ? `<p><strong>Excerpt:</strong> ${data.excerpt}</p>` : ''}
              ${data.tags ? `<p><strong>Tags:</strong> ${data.tags}</p>` : ''}
              <p><strong>Status:</strong> ${data.published ? 'Published' : 'Draft'}</p>
            </div>
            <div class="content">${data.content}</div>
          </body>
          </html>
        `);
        previewWindow.document.close();
      }
    });
  });
</script>