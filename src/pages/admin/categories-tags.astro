---
import BaseLayout from '../../layouts/BaseLayout.astro';
import AuthGuard from '../../components/AuthGuard.astro';
---

<AuthGuard>
  <BaseLayout title="Moderate Categories & Tags - Admin" description="Manage blog categories and tags">
    <div class="min-h-screen bg-gray-50 py-8">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
          <div class="flex items-center justify-between">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Moderate Categories & Tags</h1>
              <p class="mt-2 text-gray-600">Manage your blog's categories and tags</p>
            </div>
            <div class="flex space-x-3">
              <a href="/admin/dashboard" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                ‚Üê Back to Dashboard
              </a>
            </div>
          </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-blue-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-5 w-0 flex-1">
                  <dl>
                    <dt class="text-sm font-medium text-gray-500 truncate">Total Categories</dt>
                    <dd class="text-lg font-medium text-gray-900" id="categories-count">Loading...</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>

          <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="p-5">
              <div class="flex items-center">
                <div class="flex-shrink-0">
                  <div class="w-8 h-8 bg-green-100 rounded-md flex items-center justify-center">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                    </svg>
                  </div>
                </div>
                <div class="ml-5 w-0 flex-1">
                  <dl>
                    <dt class="text-sm font-medium text-gray-500 truncate">Total Tags</dt>
                    <dd class="text-lg font-medium text-gray-900" id="tags-count">Loading...</dd>
                  </dl>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Categories Section -->
        <div class="bg-white shadow rounded-lg mb-8">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-medium text-gray-900">Categories</h3>
              <button id="add-category-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add Category
              </button>
            </div>
          </div>
          <div id="categories-container" class="divide-y divide-gray-200">
            <!-- Categories will be loaded here -->
            <div class="p-6 text-center text-gray-500">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
              Loading categories...
            </div>
          </div>
        </div>

        <!-- Tags Section -->
        <div class="bg-white shadow rounded-lg">
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-medium text-gray-900">Tags</h3>
              <button id="add-tag-btn" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add Tag
              </button>
            </div>
          </div>
          <div id="tags-container" class="divide-y divide-gray-200">
            <!-- Tags will be loaded here -->
            <div class="p-6 text-center text-gray-500">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600 mx-auto mb-4"></div>
              Loading tags...
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Categories and Tags Management Script -->
    <script>
      import { createClient } from '@supabase/supabase-js';
      
      // Initialize Supabase client
      const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
      const supabaseKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;
      const supabase = createClient(supabaseUrl, supabaseKey);
      
      let categories = [];
      let tags = [];
      
      // Load data on page load
      document.addEventListener('DOMContentLoaded', async () => {
        await loadCategories();
        await loadTags();
        setupEventListeners();
      });
      
      // Setup event listeners
      function setupEventListeners() {
        document.getElementById('add-category-btn')?.addEventListener('click', addCategory);
        document.getElementById('add-tag-btn')?.addEventListener('click', addTag);
      }
      
      // Load categories from Supabase
      async function loadCategories() {
        try {
          const { data, error } = await supabase
            .from('categories')
            .select('*')
            .order('name');
          
          if (error) {
            console.error('Error loading categories:', error);
            showError('Failed to load categories');
            return;
          }
          
          categories = data || [];
          updateCategoriesStats();
          renderCategories();
          
        } catch (error) {
          console.error('Error loading categories:', error);
          showError('Failed to load categories');
        }
      }
      
      // Load tags from Supabase
      async function loadTags() {
        try {
          const { data, error } = await supabase
            .from('tags')
            .select('*')
            .order('name');
          
          if (error) {
            console.error('Error loading tags:', error);
            showError('Failed to load tags');
            return;
          }
          
          tags = data || [];
          updateTagsStats();
          renderTags();
          
        } catch (error) {
          console.error('Error loading tags:', error);
          showError('Failed to load tags');
        }
      }
      
      // Update categories statistics
      function updateCategoriesStats() {
        document.getElementById('categories-count').textContent = categories.length;
      }
      
      // Update tags statistics
      function updateTagsStats() {
        document.getElementById('tags-count').textContent = tags.length;
      }
      
      // Render categories
      function renderCategories() {
        const container = document.getElementById('categories-container');
        
        if (categories.length === 0) {
          container.innerHTML = `
            <div class="p-6 text-center text-gray-500">
              <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
              </svg>
              <p class="text-lg font-medium text-gray-900 mb-2">No categories found</p>
              <p class="text-gray-500">Create your first category to get started.</p>
            </div>
          `;
          return;
        }
        
        container.innerHTML = categories.map(category => `
          <div class="p-6 category-item" data-category-id="${category.id}">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 bg-blue-100 rounded-md flex items-center justify-center">
                    <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-medium text-gray-900">${category.name}</h4>
                    <p class="text-sm text-gray-500">Slug: ${category.slug}</p>
                  </div>
                </div>
              </div>
              <div class="flex items-center space-x-3">
                <button onclick="editCategory('${category.id}', '${category.name}', '${category.slug}')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Edit
                </button>
                <button onclick="deleteCategory('${category.id}', '${category.name}')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Delete
                </button>
              </div>
            </div>
          </div>
        `).join('');
      }
      
      // Render tags
      function renderTags() {
        const container = document.getElementById('tags-container');
        
        if (tags.length === 0) {
          container.innerHTML = `
            <div class="p-6 text-center text-gray-500">
              <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
              </svg>
              <p class="text-lg font-medium text-gray-900 mb-2">No tags found</p>
              <p class="text-gray-500">Create your first tag to get started.</p>
            </div>
          `;
          return;
        }
        
        container.innerHTML = tags.map(tag => `
          <div class="p-6 tag-item" data-tag-id="${tag.id}">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center space-x-3">
                  <div class="w-8 h-8 bg-green-100 rounded-md flex items-center justify-center">
                    <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="text-lg font-medium text-gray-900">${tag.name}</h4>
                    <p class="text-sm text-gray-500">Slug: ${tag.slug}</p>
                  </div>
                </div>
              </div>
              <div class="flex items-center space-x-3">
                <button onclick="editTag('${tag.id}', '${tag.name}', '${tag.slug}')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                  Edit
                </button>
                <button onclick="deleteTag('${tag.id}', '${tag.name}')" class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                  <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                  </svg>
                  Delete
                </button>
              </div>
            </div>
          </div>
        `).join('');
      }
      
      // Generate slug from name
      function generateSlug(name) {
        return name.toLowerCase()
          .replace(/[^a-z0-9 -]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim('-');
      }
      
      // Add category
      async function addCategory() {
        const name = prompt('Enter category name:');
        if (!name || !name.trim()) return;
        
        const slug = generateSlug(name.trim());
        
        try {
          const { error } = await supabase
            .from('categories')
            .insert([{ name: name.trim(), slug }]);
          
          if (error) {
            showError('Error adding category: ' + error.message);
            return;
          }
          
          await loadCategories();
          showSuccess('Category added successfully!');
          
        } catch (error) {
          console.error('Error adding category:', error);
          showError('Error adding category');
        }
      }
      
      // Edit category
      window.editCategory = async function(id, currentName, currentSlug) {
        const name = prompt('Edit category name:', currentName);
        if (!name || !name.trim()) return;
        
        const slug = generateSlug(name.trim());
        
        try {
          const { error } = await supabase
            .from('categories')
            .update({ name: name.trim(), slug })
            .eq('id', id);
          
          if (error) {
            showError('Error updating category: ' + error.message);
            return;
          }
          
          await loadCategories();
          showSuccess('Category updated successfully!');
          
        } catch (error) {
          console.error('Error updating category:', error);
          showError('Error updating category');
        }
      };
      
      // Delete category
      window.deleteCategory = async function(id, name) {
        if (!confirm(`Are you sure you want to delete the category "${name}"? This action cannot be undone.`)) return;
        
        try {
          const { error } = await supabase
            .from('categories')
            .delete()
            .eq('id', id);
          
          if (error) {
            showError('Error deleting category: ' + error.message);
            return;
          }
          
          await loadCategories();
          showSuccess('Category deleted successfully!');
          
        } catch (error) {
          console.error('Error deleting category:', error);
          showError('Error deleting category');
        }
      };
      
      // Add tag
      async function addTag() {
        const name = prompt('Enter tag name:');
        if (!name || !name.trim()) return;
        
        const slug = generateSlug(name.trim());
        
        try {
          const { error } = await supabase
            .from('tags')
            .insert([{ name: name.trim(), slug }]);
          
          if (error) {
            showError('Error adding tag: ' + error.message);
            return;
          }
          
          await loadTags();
          showSuccess('Tag added successfully!');
          
        } catch (error) {
          console.error('Error adding tag:', error);
          showError('Error adding tag');
        }
      }
      
      // Edit tag
      window.editTag = async function(id, currentName, currentSlug) {
        const name = prompt('Edit tag name:', currentName);
        if (!name || !name.trim()) return;
        
        const slug = generateSlug(name.trim());
        
        try {
          const { error } = await supabase
            .from('tags')
            .update({ name: name.trim(), slug })
            .eq('id', id);
          
          if (error) {
            showError('Error updating tag: ' + error.message);
            return;
          }
          
          await loadTags();
          showSuccess('Tag updated successfully!');
          
        } catch (error) {
          console.error('Error updating tag:', error);
          showError('Error updating tag');
        }
      };
      
      // Delete tag
      window.deleteTag = async function(id, name) {
        if (!confirm(`Are you sure you want to delete the tag "${name}"? This action cannot be undone.`)) return;
        
        try {
          const { error } = await supabase
            .from('tags')
            .delete()
            .eq('id', id);
          
          if (error) {
            showError('Error deleting tag: ' + error.message);
            return;
          }
          
          await loadTags();
          showSuccess('Tag deleted successfully!');
          
        } catch (error) {
          console.error('Error deleting tag:', error);
          showError('Error deleting tag');
        }
      };
      
      // Utility functions
      function showSuccess(message) {
        alert(message);
      }
      
      function showError(message) {
        alert('Error: ' + message);
      }
    </script>
  </BaseLayout>
</AuthGuard>