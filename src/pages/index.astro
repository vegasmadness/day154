---
import BaseLayout from "../layouts/BaseLayout.astro";
import BlogCard from '../components/BlogCard.astro';
import { formatDate } from '../utils/formatDate';
import { supabase } from '../utils/supabase';

// Get all published blog posts from Supabase
const { data: allPosts, error } = await supabase
  .from('posts')
  .select('*')
  .eq('is_draft', false)
  .order('published_at', { ascending: false });

if (error) {
  console.error('Error fetching posts:', error);
}

// Fetch all post-tag relationships for the published posts
const postIds = allPosts?.map(post => post.id) || [];
const { data: allPostTags, error: tagsError } = await supabase
  .from('post_tags')
  .select(`
    post_id,
    tags (
      id,
      name,
      slug
    )
  `)
  .in('post_id', postIds);

if (tagsError) {
  console.error('Error fetching post tags:', tagsError);
}

// Create a map of post ID to tags for efficient lookup
const postTagsMap = new Map();
allPostTags?.forEach(pt => {
  if (!postTagsMap.has(pt.post_id)) {
    postTagsMap.set(pt.post_id, []);
  }
  postTagsMap.get(pt.post_id).push(pt.tags);
});

// Transform Supabase posts to match the expected format
const transformedPosts = (allPosts || []).map(post => ({
  slug: post.slug,
  body: post.content || '',
  data: {
    title: post.title,
    description: post.description,
    pubDate: new Date(post.published_at || post.created_at),
    heroImage: post.hero_image,
    tags: postTagsMap.get(post.id) || [], // Now populated with actual tags from database
    draft: post.is_draft
  }
}));

// Get featured post (most recent)
const featuredPost = transformedPosts[0];

// Get all remaining posts (excluding the featured one)
const allRemainingPosts = transformedPosts.slice(1);

import Day154Grid from '../components/react/Day154Grid.tsx';
---

<BaseLayout title="day154" description="154 days between 01/08/2025 and 01/01/2026 to build a house, save my marriage and embrace every oment with my son.">
  <!-- Hero Section -->
  <section>
    <!-- Subtle background pattern -->

    <div>
      <div class="flex items-center justify-center text-xs text-gray-500 mb-4">
        <!-- day154 component -->

        <Day154Grid />
      
      </div>
    </div>

    <!-- Decorative elements -->
    <div
      class="absolute top-10 left-10 w-20 h-20 bg-primary-100 rounded-full opacity-50 blur-xl"
    >
    </div>
    <div
      class="absolute bottom-10 right-10 w-32 h-32 bg-accent-purple/20 rounded-full opacity-30 blur-2xl"
    >
    </div>
  </section>

  <!-- Featured Stories Section -->
  

  <!-- All Stories Section -->
  <section class="py-8 bg-gray-50">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
     
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {allRemainingPosts.map((post) => (
          <BlogCard post={post} />
        ))}
      </div>
      
      {allRemainingPosts.length === 0 && (
        <p class="text-center text-gray-600">No additional posts available yet. Check back soon!</p>
      )}
    </div>
  </section>
</BaseLayout>
