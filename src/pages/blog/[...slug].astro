---
import BlogLayout from '../../layouts/BlogLayout.astro';
import { supabase } from '../../utils/supabase';
import { marked } from 'marked';

// Enable static generation for blog posts
export const prerender = true;

export async function getStaticPaths() {
  // Get all published blog posts from Supabase
  const { data: posts, error } = await supabase
    .from('posts')
    .select('*')
    .eq('is_draft', false);
  
  if (error) {
    console.error('Error fetching posts for static paths:', error);
    return [];
  }
  
  // Generate static paths for each blog post
  return (posts || []).map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: any; // Supabase post type
};

const { post } = Astro.props;

// Handle missing post
if (!post) {
  return Astro.redirect('/404');
}

// Transform post to match expected format
const transformedPost = {
  id: post.id, // Include the UUID for database operations
  slug: post.slug,
  data: {
    title: post.title,
    description: post.description,
    pubDate: new Date(post.published_at || post.created_at),
    updatedDate: post.updated_at ? new Date(post.updated_at) : undefined,
    heroImage: post.hero_image,
    tags: [], // TODO: Implement tags from post_tags table
    draft: post.is_draft
  },
  body: post.content || ''
};

// Calculate reading time and word count
const wordCount = transformedPost.body.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / 200);

// Generate structured data for SEO (JSON-LD)
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": transformedPost.data.title,
  "description": transformedPost.data.description,
  "image": transformedPost.data.heroImage ? new URL(transformedPost.data.heroImage, Astro.url).href : undefined,
  "datePublished": transformedPost.data.pubDate.toISOString(),
  "dateModified": transformedPost.data.updatedDate ? transformedPost.data.updatedDate.toISOString() : transformedPost.data.pubDate.toISOString(),
  "author": {
    "@type": "Person",
    "name": "StoryHub Author"
  },
  "publisher": {
    "@type": "Organization",
    "name": "StoryHub",
    "logo": {
      "@type": "ImageObject",
      "url": new URL("/favicon.svg", Astro.url).href
    }
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": Astro.url.href
  },
  "keywords": transformedPost.data.tags?.join(", "),
  "wordCount": wordCount,
  "articleSection": "Blog"
};

// Generate canonical URL
const canonicalURL = new URL(`/blog/${transformedPost.slug}/`, Astro.site || 'http://localhost:3000');

// Render markdown to HTML
const htmlContent = marked(transformedPost.body || '');

// Create a Content component that renders HTML
const Content = () => htmlContent;
---

<BlogLayout post={transformedPost} Content={Content}>
  <!-- Enhanced SEO meta tags in head -->
  <Fragment slot="head">
    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL.href} />
    
    <!-- Article-specific meta tags -->
    <meta name="article:published_time" content={transformedPost.data.pubDate.toISOString()} />
    {transformedPost.data.updatedDate && (
      <meta name="article:modified_time" content={transformedPost.data.updatedDate.toISOString()} />
    )}
    
    <!-- Keywords meta tag -->
    {transformedPost.data.tags && transformedPost.data.tags.length > 0 && (
      <meta name="keywords" content={transformedPost.data.tags.join(", ")} />
    )}
    
    <!-- Reading time meta -->
    <meta name="twitter:label1" content="Reading time" />
    <meta name="twitter:data1" content={`${readingTime} min read`} />
    
    <!-- Word count meta -->
    <meta name="twitter:label2" content="Word count" />
    <meta name="twitter:data2" content={`${wordCount} words`} />
    
    <!-- Enhanced Open Graph tags for articles -->
    <meta property="og:type" content="article" />
    <meta property="article:author" content="StoryHub Author" />
    <meta property="article:section" content="Blog" />
    {transformedPost.data.tags && transformedPost.data.tags.map(tag => (
      <meta property="article:tag" content={tag} />
    ))}
    
    <!-- Structured data (JSON-LD) -->
    <script type="application/ld+json" is:inline set:html={JSON.stringify(structuredData)} />
    
    <!-- Preload critical resources -->
    {transformedPost.data.heroImage && (
      <link rel="preload" as="image" href={transformedPost.data.heroImage} />
    )}
    
    <!-- RSS feed discovery -->
    <link rel="alternate" type="application/rss+xml" title="StoryHub RSS Feed" href="/rss.xml" />
  </Fragment>
</BlogLayout>

